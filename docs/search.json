[
  {
    "objectID": "License.html",
    "href": "License.html",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\n wiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\n wiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "",
    "text": "About",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#date",
    "href": "index.html#date",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "Date",
    "text": "Date\n19 November 2024 | 08h30 - 13h00",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "Abstract",
    "text": "Abstract\nGeospatial networks are graphs embedded in geographical space. That means that both the nodes and edges in the graph can be represented as geographic features (e.g. points and lines) with a location somewhere on or near the surface of the earth. They play an important role in many different domains, ranging from transportation planning and logistics to ecology and epidemiology. The structure and characteristics of geospatial networks go beyond standard graph topology, and therefore it is crucial to explicitly take space into account when analyzing them. The R package sfnetworks is created to facilitate such an integrated workflow. It combines the forces of two popular R packages, sf for spatial data science and tidygraph for standard graph analysis, and extends them with functionalities that are specific to geospatial network analysis, such as geographic shortest path calculations, geospatial network cleaning, and topology modification. It also facilitates smooth integration with packages for statistical analysis on spatial linear networks, and is designed to seamlessly fit into tidy data wrangling workflows. This workshop provides an introduction to the sfnetworks package for geospatial network analysis. We will start with simple examples on abstract dummy networks, and gradually move towards the analysis of real-world networks that we extract from OpenStreetMap. We will prepare several analytical tasks to solve, of varying difficulty. If you are already working with geospatial networks, you are also encouraged to bring your own use-cases.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nTime\nDescription\n\n\n\n\n8h30 - 8h45\nWelcome + set-up\n\n\n8h45 - 9h45\nIntro to sfnetworks\n\n\n9h45 - 10h30\nHands-on preparation\n\n\n10h30 - 11h00\nMorning tea\n\n\n11h00 - 12h30\nHands-on tasks\n\n\n12h30 - 13h00\nPresent your work + wrap-up",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#hands-on-setting",
    "href": "index.html#hands-on-setting",
    "title": "Analyzing geospatial networks in R with sfnetworks",
    "section": "Hands-on setting",
    "text": "Hands-on setting\nFor this workshop, we have materials to showcase sfnetworks and for you to work with the package on different tasks. We also encourage you to bring your own data and use cases to test sfnetworks capabilities for your workflows.\nTo follow along and code for yourself you have two options:\n\nWork locally on your own R and RStudio set-up\nUse GitHub Codespaces\n\nIf you did not manage to prepare your set-up in advance for the workshop, we recommend to use GitHub Codespaces.\n\n1. Working locally\n\nR and RStudio installation\nA working installation of:\n\nR (follow CRAN recommendations for your set-up).\nRStudio (&gt;= 2024.04.x with Quarto) see here.\n\n\n\nR packages\nPlease run these commands inside the R console:\n# Install the remotes package from CRAN Repo\ninstall.packages(remotes)\n\n# Install workshop and its dependencies\nremotes::install_github(\"luukvdmeer/sfnetworks-workshop\")\n\n\nClone the workshop repository\nTo obtain the workshop materials you can clone the repository to run the Quarto documents interactively.\n\n\n\n2. Using GitHub Codespaces\n\nMake sure you have a GitHub account\nTo use Codespaces you will need a GitHub account. You can sign-up here.\n\n\nCreate your codespace\nGo to the workshop GitHub repository and click on the green button called “Code”, go to the “Codespaces” tab and click on “Create codespace on main”.\n\nA new tab will open where your Codespace will start setting-up. The process takes about 10 minutes. If you can do this before the workshop, you will save some time. However, we will go through this instructions at the start of the workshop to make sure the set-up is all set by the time we need to start coding!\n\n\nLaunch RStudio\nOnce the set-up is done, you can go to ports and launch the RStudio application in port 8787 by clicking on the browser button.\n\nIf this does not work, you might need to reload the codespace page.\nYou will get a pop-up window to type your username/password. You can use rstudio/rstudio for that.\nNow you should be in an RStudio server, congrats!\nThe only thing missing is having the workshop files on our “Files” pane. For this, click on the ... or “Go to directory” button on the files pane (shown with the red-arrow below). On the pop-up window type /workspaces and Enter.\n\nYou should now be able to see the sfnetorks-workshop directory. Click on it and you will have a cloned access of the workshop materials.\nAnd you are all set!\n\n\nCodespace management\nYour Codespace should be available to you every time you go to the workshop repository. GitHub will auto-delete your Codespace after a certain amount of time if you have not used it. This is meant to free up your Codespace storage.\nIf you have set-up the Codespace some days before the workshop, it should stay there but if you want to control when the Codespace is deleted, you can do so with the dropdown (...) next to your codespace and de-selecting the “Auto-delete codespace” option.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "pkg-intro.html",
    "href": "pkg-intro.html",
    "title": "1  Introduction to the sfnetworks package",
    "section": "",
    "text": "1.1 Background",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to the sfnetworks package</span>"
    ]
  },
  {
    "objectID": "pkg-intro.html#background",
    "href": "pkg-intro.html#background",
    "title": "1  Introduction to the sfnetworks package",
    "section": "",
    "text": "1.1.1 What are spatial networks\nSpatial networks are graphs embedded in space. Graphs are mathematical structures to model relations between objects. The objects are called nodes, and the relations between them are called edges. We usually use the term network for graph structures that have attributes. The space in which the graphs is embedded may be an abstract mathematical space. Or a “very-small-scale” space, like the human brain. Or a “very-large-scale” space, like star constellations.\n\n\n1.1.2 What are geospatial networks\nGeospatial networks are a subset of spatial networks. In geospatial networks, the nodes are embedded in geographical space. Geographical space encompasses locations on or near the surface of the Earth. We usually only consider those networks for which their geographical location is also relevant, excluding micro-scale networks such as neurons in a brain, processors in a computer, or chloroplasts in a leaf.\n\n\n1.1.3 What makes geospatial networks special\nSince nodes are embedded in space, the edges that connect them by definition have a geographical cost. Travelling an edge is not “for free”. This brings along spatial constraints, making geospatial networks “special” in different regards:\n\nUsually nodes are more likely to be connected when they are close to each other in space.\nUsually spatial constraints put limits on the maximum degree a node can have, and to on the ways a network can grow.\nMany common tasks in network analysis are often done different for spatial networks. For example, shortest path computation considers geographic costs of movement, and not just the number of edges to traverse. Community detection considers spatial proximity next to modularity. Et cetera.\nOften edges have their own explicit embedding in space as well, which may be quite different from the Euclidean shortest path between its incident nodes (e.g. in road networks, river networks, pipeline networks).\nIn real-world geospatial networks, the network itself is rarely a closed system. The nodes and edges of the network are embedded in a space in which all different kinds of processes take place, which are again geospatial by themselves. This makes us often ask questions like: “What happens in the spatial proximity of the network and how does this relate to the network?”. We will find ourselves applying all kinds of geospatial analytical operations to the network itself and its surroundings, like snapping points to their nearest nodes, performing spatial joins and spatial filters, et cetera.\nWhen doing statistical analysis of processes on the network, we need to be aware of the standard peculiarities of geospatial data, such as spatial autocorrelation and spatial heterogeneity.\nGeospatial networks also bring along common issues with representation of geospatial data that are unknown to “standard networks”, for example, coordinate reference systems and transformations between them.\n\nIn conclusion: The topology of the graph structure alone does not contain all the information that characterizes a geospatial network. We need to explicitly take space into account when analyzing geospatial networks.\n\n\n1.1.4 Why did we create sfnetworks\nIn R there are two very good packages for (geo)spatial analysis and standard graph analysis:\n\nThe {sf} package brings the simple features standard to R and provides an interface to low-level geospatial system libraries such as GDAL, GEOS, and s2, allowing to represent and analyze spatial vector data such as points, lines and polygons.\nThe {tidygraph} package provides a tidy interface to the large network analysis library {igraph}, which is written in C and also has an R API.\n\nThese packages are great for their purposes, but sf does not know about networks …\n\n\nCode to create some spatial nodes and edges\np01 = st_point(c(0, 1))\np02 = st_point(c(1, 1))\np03 = st_point(c(1, 2))\np04 = st_point(c(1, 0))\np05 = st_point(c(2, 1))\np06 = st_point(c(2, 2))\np07 = st_point(c(3, 1))\np08 = st_point(c(4, 1))\np09 = st_point(c(4, 2))\np10 = st_point(c(4, 0))\np11 = st_point(c(5, 2))\np12 = st_point(c(6, 2))\n\nl01 = st_sfc(st_linestring(c(p01, p02)))\nl02 = st_sfc(st_linestring(c(p02, p03)))\nl03 = st_sfc(st_linestring(c(p02, p04)))\nl04 = st_sfc(st_linestring(c(p02, p05)))\nl05 = st_sfc(st_linestring(c(p03, p06)))\nl06 = st_sfc(st_linestring(c(p04, p10)))\nl07 = st_sfc(st_linestring(c(p05, p06)))\nl08 = st_sfc(st_linestring(c(p05, p07)))\nl09 = st_sfc(st_linestring(c(p07, p08)))\nl10 = st_sfc(st_linestring(c(p07, p09)))\nl11 = st_sfc(st_linestring(c(p08, p09)))\nl12 = st_sfc(st_linestring(c(p08, p10)))\nl13 = st_sfc(st_linestring(c(p09, p11)))\nl14 = st_sfc(st_linestring(c(p10, p11)))\nl15 = st_sfc(st_linestring(c(p11, p12)))\n\nnodes = st_sf(\n  geometry = do.call(\"c\", lapply(list(p01, p02, p03, p04, p05, p06, p07, p08, p09, p10, p11, p12), st_sfc))\n)\n\nedges = st_sf(\n  from = c(1, 2, 2, 2, 3, 4, 5, 5, 7, 7, 8, 8, 9, 10, 11),\n  to = c(2, 3, 4, 5, 6, 10, 6, 7, 8, 9, 9, 10, 11, 11, 12),\n  geometry = c(l01, l02, l03, l04, l05, l06, l07, l08, l09, l10, l11, l12, l13, l14, l15)\n)\n\n\n\nnodes\n\nSimple feature collection with 12 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 6 ymax: 2\nCRS:           NA\nFirst 10 features:\n      geometry\n1  POINT (0 1)\n2  POINT (1 1)\n3  POINT (1 2)\n4  POINT (1 0)\n5  POINT (2 1)\n6  POINT (2 2)\n7  POINT (3 1)\n8  POINT (4 1)\n9  POINT (4 2)\n10 POINT (4 0)\n\n\n\nedges\n\nSimple feature collection with 15 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 6 ymax: 2\nCRS:           NA\nFirst 10 features:\n   from to              geometry\n1     1  2 LINESTRING (0 1, 1 1)\n2     2  3 LINESTRING (1 1, 1 2)\n3     2  4 LINESTRING (1 1, 1 0)\n4     2  5 LINESTRING (1 1, 2 1)\n5     3  6 LINESTRING (1 2, 2 2)\n6     4 10 LINESTRING (1 0, 4 0)\n7     5  6 LINESTRING (2 1, 2 2)\n8     5  7 LINESTRING (2 1, 3 1)\n9     7  8 LINESTRING (3 1, 4 1)\n10    7  9 LINESTRING (3 1, 4 2)\n\n\nset_margins()\nplot(nodes)\nplot(edges)\n\n\n\n\n\n\nNodes\n\n\n\n\n\n\n\nEdges\n\n\n\n\n\n\nwith_graph(edges, centrality_edge_betweenness())\n\nError in `.register_graph_context()`:\n! `graph` must be a &lt;tbl_graph&gt; object\n\n\n… and tidygraph does not know about space.\n\ngraph = tbl_graph(nodes, edges, directed = FALSE)\n\n\nset_margins()\nplot(graph)\n\n\n\n\n\n\n\n\n\narea = st_convex_hull(st_combine(edges[10:15, ]))\n\n\ngraph |&gt;\n  st_filter(area)\n\nError in UseMethod(\"st_filter\"): no applicable method for 'st_filter' applied to an object of class \"c('tbl_graph', 'igraph')\"\n\n\nCombining the power of the two lead to the birth of sfnetworks, a package for spatial network analysis in R.\n\nnet = sfnetwork(nodes, edges, directed = FALSE)\n\n→ Checking node geometry types ...\n\n\n✔ All nodes have geometry type POINT\n\n\n→ Checking edge geometry types ...\n\n\n✔ All edges have geometry type LINESTRING\n\n\n→ Checking coordinate reference system equality ...\n\n\n✔ Nodes and edges have the same crs\n\n\n→ Checking coordinate precision equality ...\n\n\n✔ Nodes and edges have the same precision\n\n\n→ Checking if geometries match ...\n\n\n✔ Node locations match edge boundaries\n\n\n✔ Spatial network structure is valid\n\n\n\nset_margins()\nplot(net)\n\n\n\n\n\n\n\n\n\n# Note: this computes the betweenness centrality without geographic weights.\n# We will later see how to use geographic weights.\n\nwith_graph(net, centrality_edge_betweenness())\n\n [1] 11.000000 10.000000 17.000000 12.666667  4.666667 17.000000 10.000000\n [8] 19.000000  7.000000 12.000000  3.000000  7.666667 10.000000 12.000000\n[15] 11.000000\n\n\n\nfiltered = net |&gt;\n  st_filter(area)\n\nset_margins()\nplot(net)\nplot(area, border = \"orange\", lwd = 2, lty = 4, add = TRUE)\nplot(filtered)\n\n\n\n\n\n\nOriginal\n\n\n\n\n\n\n\nFiltered\n\n\n\n\n\nThe sfnetworks ecosystem can be summarized as:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to the sfnetworks package</span>"
    ]
  },
  {
    "objectID": "pkg-intro.html#content",
    "href": "pkg-intro.html#content",
    "title": "1  Introduction to the sfnetworks package",
    "section": "1.2 Content",
    "text": "1.2 Content\n\n1.2.1 Data structure\nThe sfnetwork data structure looks like a combination of an sf table for the nodes, and an sf table for the edges.\n\nnet\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 0 ymin: 0 xmax: 6 ymax: 2\n# CRS: NA\n#\n# Node data: 12 × 1 (active)\n  geometry\n   &lt;POINT&gt;\n1    (0 1)\n2    (1 1)\n3    (1 2)\n4    (1 0)\n5    (2 1)\n6    (2 2)\n# ℹ 6 more rows\n#\n# Edge data: 15 × 3\n   from    to     geometry\n  &lt;int&gt; &lt;int&gt; &lt;LINESTRING&gt;\n1     1     2   (0 1, 1 1)\n2     2     3   (1 1, 1 2)\n3     2     4   (1 1, 1 0)\n# ℹ 12 more rows\n\n\n\nJust as with an sf object, we can assign it a coordinate reference system…\n\nst_crs(net) = 22293\nnet\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 0 ymin: 0 xmax: 6 ymax: 2\n# Projected CRS: Cape / Lo33\n#\n# Node data: 12 × 1 (active)\n     geometry\n  &lt;POINT [m]&gt;\n1       (0 1)\n2       (1 1)\n3       (1 2)\n4       (1 0)\n5       (2 1)\n6       (2 2)\n# ℹ 6 more rows\n#\n# Edge data: 15 × 3\n   from    to         geometry\n  &lt;int&gt; &lt;int&gt; &lt;LINESTRING [m]&gt;\n1     1     2       (0 1, 1 1)\n2     2     3       (1 1, 1 2)\n3     2     4       (1 1, 1 0)\n# ℹ 12 more rows\n\n\n… and transform it to other coordinate reference systems.\n\nnet |&gt;\n  st_transform(4326)\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 32.9998 ymin: -0.002658872 xmax: 32.99985 ymax: -0.002640784\n# Geodetic CRS: WGS 84\n#\n# Node data: 12 × 1 (active)\n                 geometry\n              &lt;POINT [°]&gt;\n1 (32.99985 -0.002649828)\n2 (32.99984 -0.002649828)\n3 (32.99984 -0.002658872)\n4 (32.99984 -0.002640784)\n5 (32.99983 -0.002649828)\n6 (32.99983 -0.002658872)\n# ℹ 6 more rows\n#\n# Edge data: 15 × 3\n   from    to                                       geometry\n  &lt;int&gt; &lt;int&gt;                               &lt;LINESTRING [°]&gt;\n1     1     2 (32.99985 -0.002649828, 32.99984 -0.002649828)\n2     2     3 (32.99984 -0.002649828, 32.99984 -0.002658872)\n3     2     4 (32.99984 -0.002649828, 32.99984 -0.002640784)\n# ℹ 12 more rows\n\n\nAlthough the structure looks like a container with two sf tables, it is not really. In fact, the sfnetwork class inherits the igraph class, a fully-fledged graph object.\n\nclass(net)\n\n[1] \"sfnetwork\" \"tbl_graph\" \"igraph\"   \n\n\n\n\n1.2.2 Creation\nOne of the most common ways to create a spatial network is to start with a set of spatial lines, and convert them into a network by adding nodes at the endpoints of the lines, with shared endpoints among multiple lines becoming a single node.\n\nset_margins()\nplot(st_geometry(roxel))\n\n\n\n\n\n\n\n\n\nset_margins()\nplot(as_sfnetwork(roxel))\n\n\n\n\n\n\n\n\nAnother way is to start with a set of spatial points, and specify which of these points are connected to each other. You can do this by providing an adjacency matrix, but also by choosing from a pre-defined set of methods.\n\nset_margins()\nplot(st_geometry(mozart), pch = 20)\n\n\n\n\n\n\n\n\nset_margins()\nplot(as_sfnetwork(mozart, \"complete\"))\nplot(as_sfnetwork(mozart, \"sequence\"))\nplot(as_sfnetwork(mozart, \"mst\"))\nplot(as_sfnetwork(mozart, \"delaunay\"))\nplot(as_sfnetwork(mozart, \"gabriel\"))\nplot(as_sfnetwork(mozart, \"rn\"))\nplot(as_sfnetwork(mozart, \"knn\"))\n\nWarning in spdep::knn2nb(spdep::knearneigh(st_geometry(x), k = k), sym =\nFALSE): neighbour object has 4 sub-graphs\n\nplot(as_sfnetwork(mozart, \"knn\", k = 3))\n\nWarning in spdep::knn2nb(spdep::knearneigh(st_geometry(x), k = k), sym =\nFALSE): neighbour object has 2 sub-graphs\n\n\n\n\n\n\n\nComplete\n\n\n\n\n\n\n\nSequential\n\n\n\n\n\n\n\n\n\nMinimum spanning tree\n\n\n\n\n\n\n\nDelaunay triangulation\n\n\n\n\n\n\n\n\n\nGabriel\n\n\n\n\n\n\n\nRelative neighbors\n\n\n\n\n\n\n\n\n\nNearest neighbors\n\n\n\n\n\n\n\nK nearest neighbors (k = 3)\n\n\n\n\n\n\n\n1.2.3 Tidy workflows\nBut don’t worry, thanks to tidygraph we can handle an sfnetwork object as if it was just a container with two sf tables. Hence, we simply apply our standard dplyr verbs to them for data wrangling. We just need to be explicit if we apply the verb to the nodes, or the edges. For this, tidygraph invented the activate() verb.\nNow, you can use many dplyr verbs as you would on a regular sf table. Like mutate() …\n\nnet = net |&gt;\n  activate(nodes) |&gt;\n  mutate(keep_me = sample(c(TRUE, FALSE), n(), replace = TRUE)) |&gt;\n  activate(edges) |&gt;\n  mutate(\n    name = paste0(\"edge_\", letters[1:n()]),\n    length = st_length(geometry)\n  )\n\nnet\n… and select() …\n\n\n\n\n\n\nNote\n\n\n\nNote here that in the edges table the geometry column is not the only “sticky” column anymore. Also the from and to columns, that reference the nodes at each end of the edge, survive every select operation.\n\n\n\nnet |&gt;\n  activate(edges) |&gt;\n  select(length)\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 0 ymin: 0 xmax: 6 ymax: 2\n# Projected CRS: Cape / Lo33\n#\n# Edge data: 15 × 4 (active)\n   from    to length         geometry\n  &lt;int&gt; &lt;int&gt;    [m] &lt;LINESTRING [m]&gt;\n1     1     2      1       (0 1, 1 1)\n2     2     3      1       (1 1, 1 2)\n3     2     4      1       (1 1, 1 0)\n4     2     5      1       (1 1, 2 1)\n5     3     6      1       (1 2, 2 2)\n6     4    10      3       (1 0, 4 0)\n# ℹ 9 more rows\n#\n# Node data: 12 × 2\n     geometry keep_me\n  &lt;POINT [m]&gt; &lt;lgl&gt;  \n1       (0 1) FALSE  \n2       (1 1) FALSE  \n3       (1 2) TRUE   \n# ℹ 9 more rows\n\n\n… and filter().\n\n\n\n\n\n\nNote\n\n\n\nNote here that when filtering the nodes table, the edges get filtered as well. This is because an edge in a network can by definition not exists without a node at both of its ends!\n\n\n\nnet |&gt;\n  activate(nodes) |&gt;\n  filter(keep_me)\n\n# A sfnetwork: 4 nodes and 1 edges\n#\n# An unrooted forest with 3 trees and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 1 ymin: 0 xmax: 4 ymax: 2\n# Projected CRS: Cape / Lo33\n#\n# Node data: 4 × 2 (active)\n     geometry keep_me\n  &lt;POINT [m]&gt; &lt;lgl&gt;  \n1       (1 2) TRUE   \n2       (1 0) TRUE   \n3       (2 2) TRUE   \n4       (4 2) TRUE   \n#\n# Edge data: 1 × 5\n   from    to         geometry name   length\n  &lt;int&gt; &lt;int&gt; &lt;LINESTRING [m]&gt; &lt;chr&gt;     [m]\n1     1     3       (1 2, 2 2) edge_e      1\n\n\n\n\n1.2.4 Network analysis\nSince the sfnetwork class inherits the tbl_graph class, which itself inherits the igraph class, we can apply (almost) all of tidygraphs and igraphs network analysis functionalities to sfnetwork objects without the need for conversion.\nFor example, computing node degrees and inspecting the degree distribution …\n\nnet = net |&gt;\n  activate(nodes) |&gt;\n  mutate(degree = centrality_degree())\n\n\nnet |&gt;\n  activate(nodes) |&gt;\n  st_as_sf() |&gt;\n  ggplot() +\n    geom_bar(aes(x = degree)) +\n    theme_bw()\n\n\n\n\n\n\n\n\n\nggraph(net, \"sf\") +\n  geom_edge_sf() +\n  geom_node_sf(aes(size = degree)) +\n  theme_void()\n\n\n\n\n\n\n\n\n… or converting the network to its minimum spanning tree (the subset of edges that connects all the nodes, without cycles and with the minimum possible edge length) …\n\nmst = net |&gt;\n  convert(to_minimum_spanning_tree, weights = length)\n\n\nset_margins()\nplot(mst)\n\n\n\n\n\n\n\n\n… or identify bridge edges (edges that will increase the number of connected components in the network when removed).\n\nnet = net |&gt;\n  activate(edges) |&gt;\n  mutate(is_bridge = edge_is_bridge())\n\n\nset_margins()\nggraph(net, \"sf\") +\n  geom_edge_sf(aes(color = is_bridge)) +\n  geom_node_sf() +\n  theme_void()\n\n\n\n\n\n\n\n\nThis was just a very small part of all the functions that tidygraph contains. There is much more which we will not go through here. See the tidygraph documentation.\n\n\n\n\n\n\nTip\n\n\n\nIf tidygraph does not provide a tidy interface for an igraph function, or you don’t like the way the interface is coded, you can also apply igraph functions directly to an sfnetwork object. Do note that when such a function returns a network, this will be an igraph object rather than a sfnetwork object, unless you call the function inside wrap_igraph().\n\n\n\n\n1.2.5 Spatial analysis\nIn sfnetworks, we wrote methods for all sf functions that make sense to be applied to a network structure. Thanks to this, you can also apply these spatial analytical functions to sfnetwork objects without the need for conversion.\nFor example, a spatial filter …\n\npoly = st_polygon(list(matrix(c(1.8,0.8,4.2,0.8,4.2,2.2,1.8,2.2,1.8,0.8), ncol = 2, byrow = TRUE))) |&gt;\n  st_sfc(crs = st_crs(net))\n\nnet_filtered = net |&gt;\n  activate(nodes) |&gt;\n  st_filter(poly)\n\n\nset_margins()\nplot(net, col = \"grey\")\nplot(poly, border = \"orange\", lwd = 2, lty = 4, add = TRUE)\nplot(net_filtered, lwd = 2, cex = 2, add = TRUE)\n\n\n\n\n\n\n\n\n… or a spatial join …\n\npoly1 = st_polygon(list(matrix(c(-0.2,-0.2,3.2,-0.2,3.2,2.2,-0.2,2.2,-0.2,-0.2), ncol = 2, byrow = TRUE))) |&gt;\n  st_sfc(crs = st_crs(net))\n\npoly2 = st_polygon(list(matrix(c(3.8,-0.2,6.2,-0.2,6.2,2.2,3.8,2.2,3.8,-0.2), ncol = 2, byrow = TRUE))) |&gt;\n  st_sfc(crs = st_crs(net))\n\npolys = st_sf(geometry = c(poly1, poly2)) |&gt;\n  mutate(poly_id = c(1, 2))\n\nnet_joined = net |&gt;\n  activate(nodes) |&gt;\n  st_join(polys)\n\n\nnet_joined\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 0 ymin: 0 xmax: 6 ymax: 2\n# Projected CRS: Cape / Lo33\n#\n# Node data: 12 × 4 (active)\n     geometry keep_me degree poly_id\n  &lt;POINT [m]&gt; &lt;lgl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1       (0 1) FALSE        1       1\n2       (1 1) FALSE        4       1\n3       (1 2) TRUE         2       1\n4       (1 0) TRUE         2       1\n5       (2 1) FALSE        3       1\n6       (2 2) TRUE         2       1\n# ℹ 6 more rows\n#\n# Edge data: 15 × 6\n   from    to         geometry name   length is_bridge\n  &lt;int&gt; &lt;int&gt; &lt;LINESTRING [m]&gt; &lt;chr&gt;     [m] &lt;lgl&gt;    \n1     1     2       (0 1, 1 1) edge_a      1 TRUE     \n2     2     3       (1 1, 1 2) edge_b      1 FALSE    \n3     2     4       (1 1, 1 0) edge_c      1 FALSE    \n# ℹ 12 more rows\n\n\n\nset_margins()\nplot(st_geometry(net_joined, \"edges\"))\nplot(st_geometry(polys)[1], border = \"orange\", lwd = 2, lty = 4, add = TRUE)\nplot(st_geometry(polys)[2], border = \"deepskyblue\", lwd = 2, lty = 4, add = TRUE)\nplot(select(st_as_sf(net_joined, \"nodes\"), poly_id), pal = c(\"orange\", \"deepskyblue\"), pch = 20, cex = 2, add = TRUE)\n\n\n\n\n\n\n\n\nAlso in this section we only showed a very small part of what sf can do and how this can be used on sfnetwork objects. There is much more which we will not go through here. See the sf documentation.\n\n\n1.2.6 Spatial network analysis\nSince sf does not know about networks and tidygraph does not know about space, neither of them offer functions that are specific to spatial networks. That is why it was not enough for sfnetworks to only combine the functionalities of the two “parent packages”. The system is more than the sum of its parts! We needed to extend the functionalities of sf and tidygraph with functions that implement operations which are specific to spatial network analysis.\nOne example is a process which we called “blending”: you snap a point to the nearest location on the network, subdivide the network at that location, and finally add the snapped point as a new node to the network.\n\np1 = st_sfc(st_point(c(0.5, 1.2)), crs = st_crs(net))\np2 = st_sfc(st_point(c(2.5, 0.3)), crs = st_crs(net))\n\npoints = st_sf(geometry = c(p1, p2)) |&gt;\n  mutate(point_id = c(\"a\", \"b\"))\n\nblended_net = st_network_blend(net, points)\n\nWarning: `st_network_blend()` assumes all attributes are constant over geometries.\n! Not all attributes are labelled as being constant.\nℹ You can label attribute-geometry relations using `sf::st_set_agr()`.\n\n\n\nset_margins()\nplot(blended_net)\nplot(points, pal = c(\"orange\", \"deepskyblue\"), pch = 8, cex = 2, add = TRUE)\n\n\n\n\n\n\n\n\nWe can also compute several spatial measures for edges and nodes. For example, we can compute the geographic length of each edge. These may be longer than the euclidean distance between its source and target nodes, which is also called the displacement of the edge. The ratio between the two is known as the circuity. A related concept is the straightness centrality of nodes, which is calculated by first computing the ratios between length and displacement for the shortest paths between a node and all other nodes in the network, and the taking the average of those values.\n\nnet |&gt;\n  activate(nodes) |&gt;\n  mutate(sc = centrality_straightness()) |&gt;\n  activate(edges) |&gt;\n  mutate(length = edge_length(), dp = edge_displacement(), circuity = edge_circuity())\n\n# A sfnetwork: 12 nodes and 15 edges\n#\n# An undirected simple graph with 1 component and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 0 ymin: 0 xmax: 6 ymax: 2\n# Projected CRS: Cape / Lo33\n#\n# Edge data: 15 × 8 (active)\n   from    to         geometry name   length is_bridge  dp circuity\n  &lt;int&gt; &lt;int&gt; &lt;LINESTRING [m]&gt; &lt;chr&gt;     [m] &lt;lgl&gt;     [m]    &lt;dbl&gt;\n1     1     2       (0 1, 1 1) edge_a      1 TRUE        1        1\n2     2     3       (1 1, 1 2) edge_b      1 FALSE       1        1\n3     2     4       (1 1, 1 0) edge_c      1 FALSE       1        1\n4     2     5       (1 1, 2 1) edge_d      1 FALSE       1        1\n5     3     6       (1 2, 2 2) edge_e      1 FALSE       1        1\n6     4    10       (1 0, 4 0) edge_f      3 FALSE       3        1\n# ℹ 9 more rows\n#\n# Node data: 12 × 4\n     geometry keep_me degree    sc\n  &lt;POINT [m]&gt; &lt;lgl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1       (0 1) FALSE        1 0.892\n2       (1 1) FALSE        4 0.936\n3       (1 2) TRUE         2 0.806\n# ℹ 9 more rows\n\n\nA core task in spatial network analysis is shortest path calculations. This is something that is also relevant for standard networks, but tidygraph does not put a lot of emphasis on it.\n\npath = st_network_paths(net, from = 1, to = 12)\npath\n\nSimple feature collection with 1 feature and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 0 ymin: 1 xmax: 6 ymax: 2\nProjected CRS: Cape / Lo33\n# A tibble: 1 × 7\n   from    to node_path edge_path path_found cost                       geometry\n  &lt;int&gt; &lt;int&gt; &lt;list&gt;    &lt;list&gt;    &lt;lgl&gt;       [m]               &lt;LINESTRING [m]&gt;\n1     1    12 &lt;dbl [7]&gt; &lt;dbl [6]&gt; TRUE       6.41 (0 1, 1 1, 2 1, 3 1, 4 2, 5 2…\n\n\n\nset_margins()\nggraph(net, \"sf\") +\n  geom_edge_sf(color = \"grey50\") +\n  geom_sf(data = path, color = \"orange\", linewidth = 1) +\n  geom_node_sf(color = \"grey50\", size = 2) +\n  theme_void()\n\n\n\n\n\n\n\n\n\npath = st_network_paths(net, from = 1, to = 12, weights = NA)\n\n\nset_margins()\nggraph(net, \"sf\") +\n  geom_edge_sf(color = \"grey50\") +\n  geom_sf(data = path, color = \"orange\", linewidth = 1) +\n  geom_node_sf(color = \"grey50\", size = 2) +\n  theme_void()\n\n\n\n\n\n\n\n\nAdditionally, sfnetworks lets you compute shortest paths between any pair of spatial points, by first snapping them to their nearest network node.\n\np1 = st_sfc(st_point(c(0, 1.2)), crs = st_crs(net))\np2 = st_sfc(st_point(c(5.6, 1.8)), crs = st_crs(net))\n\npts = st_sf(geometry = c(p1, p2))\npath = st_network_paths(net, from = p1, to = p2, weights = \"length\")\n\nWarning: The `weights` argument of `evaluate_weight_spec()` uses tidy evaluation as of\nsfnetworks v1.0.\nℹ This means you can forward column names without quotations, e.g. `weights =\n  length` instead of `weights = 'length'`. Quoted column names are currently\n  still supported for backward compatibility, but this may be removed in future\n  versions.\nℹ The deprecated feature was likely used in the sfnetworks package.\n  Please report the issue at\n  &lt;https://github.com/luukvdmeer/sfnetworks/issues/&gt;.\n\n\n\nset_margins()\nggraph(net, \"sf\") +\n  geom_edge_sf(color = \"grey50\") +\n  geom_sf(data = path, color = \"orange\", linewidth = 1) +\n  geom_node_sf(color = \"grey50\", size = 2) +\n  geom_sf(data = pts, color = \"deepskyblue\", pch = 8, size = 4) +\n  theme_void()\n\n\n\n\n\n\n\n\nAs a bridge to the next part on “Real-world networks”, we’ll show a subset of functions we implemented to clean a spatial network. Because real-world networks are rarely as clean as our beloved toy network.\nLets first create a very dirty toy network.\n\n\nCode to create a dirty network for cleaning\np01 = st_point(c(0, 1))\np02 = st_point(c(1, 1))\np03 = st_point(c(2, 1))\np04 = st_point(c(3, 1))\np05 = st_point(c(4, 1))\np06 = st_point(c(3, 2))\np07 = st_point(c(3, 0))\np08 = st_point(c(4, 3))\np09 = st_point(c(4, 2))\np10 = st_point(c(4, 0))\np11 = st_point(c(5, 2))\np12 = st_point(c(5, 0))\np13 = st_point(c(5, -1))\np14 = st_point(c(5.8, 1))\np15 = st_point(c(6, 1.2))\np16 = st_point(c(6.2, 1))\np17 = st_point(c(6, 0.8))\np18 = st_point(c(6, 2))\np19 = st_point(c(6, -1))\np20 = st_point(c(7, 1))\n\nl01 = st_sfc(st_linestring(c(p01, p02, p03)))\nl02 = st_sfc(st_linestring(c(p03, p04, p05)))\nl03 = st_sfc(st_linestring(c(p06, p04, p07)))\nl04 = st_sfc(st_linestring(c(p08, p11, p09)))\nl05 = st_sfc(st_linestring(c(p09, p05, p10)))\nl06 = st_sfc(st_linestring(c(p08, p09)))\nl07 = st_sfc(st_linestring(c(p10, p12, p13, p10)))\nl08 = st_sfc(st_linestring(c(p05, p14)))\nl09 = st_sfc(st_linestring(c(p15, p14)))\nl10 = st_sfc(st_linestring(c(p16, p15)))\nl11 = st_sfc(st_linestring(c(p14, p17)))\nl12 = st_sfc(st_linestring(c(p17, p16)))\nl13 = st_sfc(st_linestring(c(p15, p18)))\nl14 = st_sfc(st_linestring(c(p17, p19)))\nl15 = st_sfc(st_linestring(c(p16, p20)))\n\nlines = c(\n  l01, l02, l03, l05, l06,\n  l04, l07, l08, l09, l10,\n  l11, l12, l13, l14, l15\n)\n\ndirty = as_sfnetwork(lines)\n\n\n\nset_margins()\nplot(dirty)\n\n\n\n\n\n\n\n\n\nsimple = convert(dirty, to_spatial_simple)\nsub = convert(simple, to_spatial_subdivision)\nsmooth = convert(sub, to_spatial_smooth)\nclean = convert(smooth, to_spatial_contracted, group_spatial_dbscan(0.5))\n\nset_margins()\nplot(simple)\nplot(sub)\nplot(smooth)\nplot(clean)\n\n\n\n\n\n\nSimplified\n\n\n\n\n\n\n\nSubdivided\n\n\n\n\n\n\n\n\n\nSmoothed\n\n\n\n\n\n\n\nContracted\n\n\n\n\n\n\nset_margins()\nplot(clean)\n\n\n\n\n\n\n\n\nAlso in this section, we only showed a subset of function that sfnetworks added on top of the existing sf and tidygraph functions. There is much more which we will not go through here. See the sfnetworks documentation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to the sfnetworks package</span>"
    ]
  },
  {
    "objectID": "hands-on.html",
    "href": "hands-on.html",
    "title": "2  Hands-on",
    "section": "",
    "text": "2.1 Libraries\nHere we load the necessary libraries for our hands-on session.\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(mapview)\nlibrary(sf)\nlibrary(sfnetworks)\nlibrary(tidygraph)\nlibrary(tidyverse)\n\n## Optional libraries depending on the tasks you pick:\nlibrary(osmdata)\nlibrary(sp)\nlibrary(spatstat.linnet)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hands-on</span>"
    ]
  },
  {
    "objectID": "hands-on.html#data",
    "href": "hands-on.html#data",
    "title": "2  Hands-on",
    "section": "2.2 Data",
    "text": "2.2 Data\nA common source for open geospatial network data is OpenStreetMap (https://www.openstreetmap.org), a crowd-sourced map platform.\nWe use OpenStreetMap data for the hands-on session and we do so using the osmdata package, which is the R interface to the Overpass API of OpenStreetMap.\n\n\n\n\n\n\nTip\n\n\n\nFor larger networks, it is not recommended to use the Overpass API for data retrieval. You can better download an OpenStreetMap extract (for example from Geofabrik) and read it into R using the osmextract package.\n\n\nWe have prepared some data for you, so that we don’t overwhelm the OpenStreetMap API. However, this section includes code if you are interested on how to retrieve the data for yourself.\nWe also queried data from iNaturalist with rinat. And have also saved this into a dataset for your convenience.\n\n2.2.1 Cape Town datasets\nIf you choose Nicolaas, Annika or Kaya, you will be working with data in Cape Town. We provide you with the following datasets:\n\nRoad networkPOIsCoffee placesSuburbs\n\n\n\nThe Cape Town road network data was queried from OpenStreetMap, using the “highway” key.\n\n\n\nUnfold me to see how to query road data from OSM\nlibrary(osmdata)\n# Set bounding box\nbounds = \"Cape Town Ward 115, South Africa\"\n# Obtain Cape Town from OSM\nbb = getbb(bounds, format_out = 'sf_polygon')\n\n## Roads\n# Download OSM data for Cape Town, with the key=highway\nroads = opq(bounds) |&gt;\n  add_osm_feature(key = \"highway\") |&gt;\n  osmdata_sf() |&gt; \n  osm_poly2line()\n# Create a LINESTRING sf object with selected columns\nlines = roads |&gt; \n  pluck(\"osm_lines\") |&gt; \n  st_intersection(bb) |&gt; \n  filter(st_is(geometry, c(\"LINESTRING\", \"MULTILINESTRING\"))) |&gt; \n  st_cast(\"LINESTRING\") |&gt; \n  dplyr::select(\n    name, 'type' = highway, \n    maxspeed, surface, \n    lanes, oneway, cycleway\n  )|&gt; \n  filter(!type %in% c(\"bus_stop\", \"elevator\", \"steps\", \"busway\",\n                      \"corridor\", \"track\", \"living_street\", NA))\n\nwrite_sf(\n  lines,\n  \"data/south-africa/cape-town/cape_town_osm_roads.gpkg\"\n)\n\n\n\nThe data is saved as a geopackage (.gpkg). You can load the data using the sf package directly from a URL and then convert it into a sfnetwork. PS. we rename the “geom” column to “geometry” due to a small bug with ggraph and called the object ct_roads\n\n\n\nUnfold me to see how to load the data\nct_roads = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/cape-town/cape_town_osm_roads.gpkg\"\n) |&gt; \n  rename(geometry = geom)\n\n\n\n\n\nIn the tasks below you will find different people who need help with spatial networks. We have compiled here a number of points of interest (POIs) that you will need to complete the tasks.\n\n\n\nUnfold me for code to create a sf from point coordinates\n## POIs in CT\npois = st_sfc(\n  st_point(c(-33.922584,18.426465)),\n  st_point(c(-33.909360,18.422753)),\n  st_point(c(-33.917620,18.422291)),\n  crs = 4326\n) |&gt; \n  st_as_sf(place = c(\n      \"Cape Town Station\",\n      \"Radisson Red Hotel\",\n      \"AfricaWorks CBD\"\n  )\n)\n\nwrite_sf(pois, \"data/south-africa/cape-town/cape_town_pois.gpkg\")\n\n\n\nYou can use sf to load this data. Remember our “geom” rename trick. We called this object ct_pois.\n\n\n\nUnfold me to see how to load the data\nct_pois = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/cape-town/cape_town_pois.gpkg\"\n) |&gt; \n  rename(geometry = geom)\n\n\n\n\n\nTo help Annika you will need the location of coffee places in Cape Town. For this we queried all the coffee places within the bounds used for the query of the Cape Town road network.\n\n\n\nUnfold me for code to query coffee places from OSM\n## Coffee places in CT\nct_cafes_osm = opq(bounds) |&gt;\n  add_osm_feature(key = \"amenity\", value = \"cafe\") |&gt;\n  osmdata_sf() \n\nct_cafes = bind_rows(\n  ct_cafes_osm$osm_points,\n  st_centroid(ct_cafes_osm$osm_polygons)\n)\n\nwrite_sf(ct_cafes, \"data/south-africa/cape-town/cape_town_cafes.gpkg\")\n\n\n\nYou can use sf to load this data. Remember our “geom” rename trick. We called this object ct_cafes.\n\n\n\nUnfold me to see how to load the data\nct_cafes = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/cape-town/cape_town_cafes.gpkg\"\n) |&gt; \n  rename(geometry = geom) \n\n\n\n\n\nTo help Kaya, you will need data on Cape Town suburbs. We extracted them from OSM using the Ward bounds and the place=suburb combination.\n\n\n\nUnfold me for code to extract CT suburbs from OSM\nct_suburbs_osm = opq(bounds) |&gt; \n  add_osm_feature(key = \"place\", value = \"suburb\") |&gt; \n  osmdata_sf()\n\nct_suburbs = ct_suburbs_osm$osm_multipolygons |&gt; \n  select(name)\n\nwrite_sf(ct_suburbs, \"data/south-africa/cape-town/cape_town_suburbs.gpkg\")\n\n\n\nYou can use sf to load this data. Remember our “geom” rename trick. We called this object ct_suburbs.\n\n\n\nUnfold me to see how to load the data\nct_suburbs = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/cape-town/cape_town_suburbs.gpkg\"\n) |&gt; \n  rename(geometry = geom) \n\n\n\n\n\n\n\n2.2.2 Kruger datasets\nIf you choose Joseph or Amina, you will be working in Kruger National Park. We prepared the following datasets:\n\nRoad networkRest campsAnimal sightings\n\n\n\nThe Kruger NP road data was queried from OpenStreetMap, using the “highway” key.\n\n\n\nUnfold me to see how to query road data from OSM\nlibrary(osmdata)\n## Bounding box\narea = \"Kruger National Park, South Africa\"\n# Obtain Kruger NP boundary from OSM\nbb = getbb(area, format_out = 'sf_polygon')\n\n## Roads\n# Download OSM data for Kruger NP, with the key=highway\nroads = opq(area) |&gt;\n  add_osm_feature(key = \"highway\") |&gt;\n  osmdata_sf() |&gt; \n  osm_poly2line()\n# Create a LINESTRING sf object with selected columns\nlines = roads |&gt; \n  pluck(\"osm_lines\") |&gt; \n  st_intersection(bb) |&gt; \n  filter(st_is(geometry, c(\"LINESTRING\", \"MULTILINESTRING\"))) |&gt; \n  st_cast(\"LINESTRING\") |&gt; \n  dplyr::select(\n    name, 'type' = highway, \n    maxspeed, surface\n  )\n\nwrite_sf(lines, \"data/south-africa/kruger/kruger_osm_roads.gpkg\")\n\n\n\nThe data is saved as a geopackage (.gpkg). You can load the data using the sf package directly from a URL and then convert it into a sfnetwork. PS. we rename the “geom” column to “geometry” due to a small bug with ggraph. We called this object kruger_roads.\n\n\n\nUnfold me to see how to load the data\nkruger_roads = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/kruger/kruger_osm_roads.gpkg\"\n) |&gt; \n  rename(geometry = geom)\n\n\n\n\n\nThe Kruger rest camps were obtained from the SANParks website GPS waypoints.\nThe table was manually copied to a CSV file and the code below shows how to wrangle the data and convert to an sf. We called this object kruger_camps.\n\n\n\nUnfold me for code to wrangle deg, min, sec data\nlibrary(sp)\nkruger_camps_raw = read_csv(\"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/kruger/kruger-rest-camps.csv\", quote = \"'\") \nkruger_camps = kruger_camps_raw |&gt; \n  transmute(\n    camp = Camp,\n    lat = as.numeric(char2dms(kruger_camps_raw$Latitude, chd = '°', chm = '’', chs = '”')),\n    lon = as.numeric(char2dms(kruger_camps_raw$Longitude, chd = '°', chm = '’', chs = '”'))\n  ) |&gt; \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\n\nwrite_sf(kruger_camps, \"data/south-africa/kruger/kruger_rest_camps.gpkg\")\n\n\n\nYou can use sf to load this data. Remember our “geom” rename trick. We called this object kruger_camps.\n\n\n\nUnfold me to see how to load the data\nkruger_camps = read_sf(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/kruger/kruger_rest_camps.gpkg\"\n) |&gt; \n  rename(geometry = geom)\n\n\n\n\n\nWe queried mammals’ sightings data from iNaturalist. We limited the sightings to Mammals and check on their website the corresponding place_id for Kruger National Park.\n\n\n\nUnfold me for code to query animal sightings from iNaturalist\nlibrary(rinat)\nkruger_animals = get_inat_obs(\n  geo = TRUE,\n  taxon_name = \"Mammalia\",\n  place_id = 69020, # Kruger National Park\n  maxresults = 2500,\n  year = 2024\n) |&gt; select(-c(sound_url, oauth_application_id))\n\n# Save to CSV\nwrite_csv(\n  kruger_animals,\n  \"data/south-africa/kruger/kruger_mammalia_inaturalist.csv\"\n)\n\n\n\nThe data is saved as a CSV file. You can use readr, part of the tidyverse package bundle to read this into R. We called this object kruger_animals.\n\n\n\nUnfold me to see how to read CSV data\nkruger_animals = read_csv(\n  \"https://github.com/luukvdmeer/sfnetworks-workshop/raw/refs/heads/main/data/south-africa/kruger/kruger_mammalia_inaturalist.csv\",\n  show_col_types = FALSE\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hands-on</span>"
    ]
  },
  {
    "objectID": "hands-on.html#pre-processing",
    "href": "hands-on.html#pre-processing",
    "title": "2  Hands-on",
    "section": "2.3 Pre-processing",
    "text": "2.3 Pre-processing\n\n1. Creating the networkCape TownKruger\n\n\nThe retrieved streets from OpenStreetMap can be converted into a sfnetwork object, and projected into the South African CRS.\nTry to create the sfnetwork yourself. You can check the package documentation to help you. For network creation you can type ?as_sfnetwork on your console.\nIf you are stuck, check the solution code on the next tabs.\n\n\n\nct_sfn = as_sfnetwork(ct_roads, directed = FALSE) |&gt;\n  st_transform(22293)\n\nct_sfn\n\n# A sfnetwork: 7346 nodes and 5961 edges\n#\n# An undirected multigraph with 1889 components and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 1348243 ymin: 3849174 xmax: 1356360 ymax: 3853770\n# Projected CRS: Cape / Lo33\n#\n# Node data: 7,346 × 1 (active)\n           geometry\n        &lt;POINT [m]&gt;\n1 (1352356 3851634)\n2 (1352581 3851502)\n3 (1352386 3852234)\n4 (1353412 3851181)\n5 (1353318 3851133)\n6 (1352156 3852651)\n# ℹ 7,340 more rows\n#\n# Edge data: 5,961 × 10\n   from    to name                  type  maxspeed surface lanes oneway cycleway\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   \n1     1     2 Nelson Mandela Boule… moto… 80       asphalt 2     yes    &lt;NA&gt;    \n2     1     3 Nelson Mandela Boule… moto… 80       asphalt 2     yes    &lt;NA&gt;    \n3     4     5 Nelson Mandela Boule… prim… 60       asphalt 4     yes    &lt;NA&gt;    \n# ℹ 5,958 more rows\n# ℹ 1 more variable: geometry &lt;LINESTRING [m]&gt;\n\n\n\n\n\nkruger_sfn = as_sfnetwork(kruger_roads, directed = FALSE) |&gt;\n  st_transform(22293)\n\nkruger_sfn\n\n# A sfnetwork: 4600 nodes and 3063 edges\n#\n# An undirected multigraph with 1669 components and spatially explicit edges\n#\n# Dimension: XY\n# Bounding box: xmin: 97437.51 ymin: 2471667 xmax: 216928.7 ymax: 2824573\n# Projected CRS: Cape / Lo33\n#\n# Node data: 4,600 × 1 (active)\n            geometry\n         &lt;POINT [m]&gt;\n1 (149276.4 2817273)\n2 (156565.6 2814154)\n3 (142341.8 2803347)\n4 (148157.2 2798709)\n5 (143338.8 2791381)\n6 (145426.2 2782801)\n# ℹ 4,594 more rows\n#\n# Edge data: 3,063 × 7\n   from    to name              type  maxspeed surface                  geometry\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;LINESTRING [m]&gt;\n1     1     2 Matjulu Loop      uncl… 50       asphalt (149276.4 2817273, 14928…\n2     3     4 Old Voortrekker … uncl… &lt;NA&gt;     gravel  (142341.8 2803347, 14243…\n3     5     6 &lt;NA&gt;              seco… 50       asphalt (143338.8 2791381, 14343…\n# ℹ 3,060 more rows\n\n\n\n\n\n\n2. Cleaning the networkCape TownKruger\n\n\nA typical workflow to clean a network was shown in the introductory part. Remember when we talked about cleaning the dirty network? For networks queried from OpenStreetMap, it is particularly important to clean your network. You can find more information in the package vignette Cleaning spatial networks.\nThis is a recap of the usual steps:\n\nSubdivide the edges\nSmooth pseudo nodes\nExtract the largest component\n\nIf you got stuck and can’t remember the code, see the next tabs.\n\n\n\nct_sfn_clean = ct_sfn |&gt;\n  convert(to_spatial_subdivision) |&gt;\n  convert(to_spatial_smooth, .clean = TRUE) |&gt;\n  convert(to_largest_component)\n\nWarning: `subdivide_edges()` assumes all attributes are constant over geometries.\n! Not all attributes are labelled as being constant.\nℹ You can label attribute-geometry relations using `sf::st_set_agr()`.\n\n\n\n\n\nkruger_sfn_clean = kruger_sfn |&gt;\n  convert(to_spatial_subdivision) |&gt;\n  convert(to_spatial_smooth, .clean = TRUE) |&gt;\n  convert(to_largest_component)\n\nWarning: `subdivide_edges()` assumes all attributes are constant over geometries.\n! Not all attributes are labelled as being constant.\nℹ You can label attribute-geometry relations using `sf::st_set_agr()`.\n\n\n\n\n\n\n3. Explore the networkCape TownKruger\n\n\nA good way to check the network you are dealing with is plotting. sfnetworks has a default plot method, but ggraph allows you a bit more flexibility when plotting your network.\nFor an interactive view you can use mapview.\nIf you got stuck and don’t know how to visualize you network, see examples in the next tabs.\n\n\nTo plot a sfnetwork object using the default you can just call the plot() function. You can also pass arguments to the nodes and edges separately. See how by typing ?plot.sfnetwork on your R console.\n\nplot(ct_sfn_clean)\n\n\n\n\n\n\n\n\nInteractive plots can be created with mapview(). Run the following chunk interactively in your console.\n\nmapview(st_as_sf(ct_sfn_clean, \"edges\")) +\nmapview(st_as_sf(ct_sfn_clean, \"nodes\"))\n\n\n\nggraph extends ggplot2 to support graph structures. Developed by the same person as tidygraph, it was only logical it should work with sfnetworks,,\nSee more about using ggraph with sfnetworks objects by checking the docs (ggraph website, ?ggraph::geom_node_sf(), ?ggraph::geom_edge_sf())\n\nggraph(kruger_sfn_clean, \"sf\") +\n  geom_node_sf(size = 0.5) + \n  geom_edge_sf(aes(color = surface)) +\n  theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hands-on</span>"
    ]
  },
  {
    "objectID": "hands-on.html#tasks",
    "href": "hands-on.html#tasks",
    "title": "2  Hands-on",
    "section": "2.4 Tasks",
    "text": "2.4 Tasks\nYou are spatial network expert and many people need your help for distinct tasks. Below you will get to know a bit about them, what they like and what they need your help with. Pick your favorite.\n\nNicolaas\n\n\nTask 1 ⭐⚪⚪Task 2 ⭐⭐⚪Task 3 ⭐⭐⚪Task 4 ⭐⭐⭐Task 5 ⭐⭐⭐\n\n\nCompute the shortest route between Cape Town train station and the Radison Red Hotel where Nicolaas has his meeting.\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou can use the function st_network_paths() to find the shortest paths between nodes in the network. The nodes can be specified as spatial point features. In this case, the function will first find the nearest nodes to those points.\n\n\n\n\n\nThe shortest route is not necessarily the best one for Nicolaas to ride his bike. He prefers to ride on bikelanes, and if they are not available, at least avoid larger roads with heavy traffic. Can you create a custom edge weight that would find the optimal route for Nicolaas, considering the specified preferences? How much longer is this route compared to the shortest route you computed before?\n\n\n\n\n\n\nHint\n\n\n\n\n\nA custom weighting profile could create a “perceived length” of each edge by multiplying the true length with a multiplication factor that is a function of the road type.\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTake a look at this section in the documentation to find out how to create a simple custom weighting profile. Note that the one is the documentation is meant for cars, so the one you would create for bikes would look different!\n\n\n\n\n\nNicolaas is not the only one in Cape Town who would like to use a bicycle to get from A to B. Within the study area, sample 20 origins and 20 destinations of trips that people would like to do by bike. Can you compute for each of them how much longer the optimal route (according to the weights you created before) is compared to the shortest route?\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo randomly sample spatial points, you can use the st_sample() function from the {sf} package.\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nWhen you want to compute travel costs between many origins and destinations, you can use the st_network_cost() function to create a OD cost matrix. If you want to compute costs using custom edge weights, but report the true distance of those routes, this is called dual-weighted routing. Learn here how to do this in {sfnetworks}. Do note that you have to change the routing backend to the {dodgr} package, since the default routing backend (the {igraph} package) does not support dual-weighted routing.\n\n\n\n\n\nThe custom weights for bicycle routing that you used in the previous tasks are very simple. They only prefer bikelanes and avoid large roads. But there is more to bicycle suitability than just that. Can you create bicycle routing weights that take more factors into account? Think for example of slopes (cycling uphill, flat or downhill), comfort (the type of street surface), and the “pleasurability” of the environment (cycling through green areas). You could even think of a weight that is time dependent, with different values during daytime and nighttime.\n\n\n\n\n\n\nHint\n\n\n\n\n\nIf you want to include slopes, we added the Digital Elevation Model (DEM) covering Cape Town to the data for this workshop. With the R package {slopes}, you can compute the slope of linestring geometries based on a provided DEM. See here for an example. For other factors, you can use any additional data from OpenStreetMap by loading it through the {osmdata} package, just as we did for the Cape Town street network.\n\n\n\n\n\nThere is clearly a lack of bike lanes in Cape Town. Assume that the origins and destinations that you sampled in Task 3 are the places people want to bike between. Which streets would you prioritize to build bike lanes along?\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou could base yourself on this paper from Szell et al (2022): Growing Urban Bicycle Networks. In the section “Growing bicycle networks from scratch” on Page 3 they explain a simple workflow to grow a new cycling network. In {sfnetworks}, you can create the “greedy triangulation” using create_from_spatial_points() with connections = \"delaunay\". Betweenness centrality of edges can be computed using tidygraph::centrality_edge_betweenness(), and closeness centrality of nodes using tidygraph::centrality_closeness().\n\n\n\n\n\n\n\n\nAnnika\n\n\nTask 1 ⭐⚪⚪Task 2 ⭐⭐⚪Task 3 ⭐⭐⚪Task 4 ⭐⭐⚪Task 5 ⭐⭐⚪\n\n\nHow many coffee shops can Annika reach in 15 minutes walking time from her coworking space?\n\n\n\n\n\n\nNote\n\n\n\nWhat we are computing here is also known as a location-based accessibility measure. We measure the accessibility of coffee shops from Annikas location. The specific measure you are computing now is one of the simplest, and known as a cumulative opportunities measure.\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo compute travel costs over the network between locations, you can use the function st_network_cost().\n\n\n\n\n\nAlthough Annika is willing to walk 15 minutes, she still prefers coffee shops that are closer. In the previous task, all coffee shops within 15 minutes are counted equally, no matter if they are 4 or 14 minutes away. Can you address this by integrating a decay function, that gives lower weights to coffee shops the further they are away from Annika. Then, use those weights to compute a weighted sum of coffee shops within Annikas reach.\n\n\n\n\n\n\nNote\n\n\n\nThis type of accessibility measures with (continuous) decay functions are often referred to a gravity-based accessibility, since they were originally inspired by the concept of gravity, in which the gravitational force between two objects increases as they get closer together.\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nA common decay function is exponential decay, in the form \\(e^{-\\beta}\\). Often, \\(\\beta\\) will be estimated using observed travel data, but you can use a value of 0.5. Alternatively, you could use a linear decay function, a step-wise decay function, or anything you find appropriate.\n\n\n\n\n\nAnnika likes some coffee shops more than others, simply because they serve better quality coffee in a cozier atmosphere. For those, she is less picky about the time she has to travel. If the reward is higher, she is does not mind to walk a bit longer! Can you address this by integrating a attractiveness factor, that assign higher weights to those coffee shops that Annika finds attractive. You can either assign the attractiveness randomly, or base it in some way on the available data.\n\n\n\n\n\n\nNote\n\n\n\nIn gravity-based accessibility measures, the attractiveness of destinations is the equivalent of mass in gravity. A higher mass of the object means a higher gravitational force. In practice, however, you will see very few accessibility analysis that actually incorporate any kind of destination attractiveness.\n\n\n\n\nAnnika is of course not the only one visiting coffee shops. Within the study area, sample 100 locations of people that want to drink coffee. Assuming all these people opt to go to their nearest coffee shop, how many visitors would each shop have?\n\n\n\n\n\n\nHint\n\n\n\n\n\nThis type of analysis is called a closest facility analysis. An example is given in the package documentation, see here.\n\n\n\n\n\nNow suppose there were no coffee shops in Cape Town, and you are the first person to start one. Knowing that the people you sampled in Task 4 are your potential customers, and you can choose any network node to start your coffee shop, where would you place it?\n\n\n\n\n\nKaya\n\n\nTask 1 ⭐⚪⚪Task 2 ⭐⚪⚪Task 3 ⭐⭐⚪Task 4 ⭐⭐⭐\n\n\nKaya has been reading an interesting paper by Barthelemy & Boeing (2024): A Review of the Structure of Street Networks. First, she wants to compute the basic measures mentioned in Table 1, for the study area in Cape Town. Can you help her do this? The measures are:\n\nThe average degree centrality of nodes\nThe proportion of dead-ends\nThe proportion of intersections where four or more streets come together\nThe average street length\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe degree centrality of a node is the number of edges connected to it. This can be computed using tidygraph::centrality_degree(). Dead-ends are nodes with a degree centrality of one. Intersections were four or more streets come together are nodes with a degree centrality higher than four. The length of an edge can be computed using sfnetworks::edge_length().\n\n\n\n\n\nKaya also reads in the paper that the detour ratio, or circuity, is an important concept in street networks. This measures how much longer the real streets are compared to the hypothetical situation in which all streets would be straight lines between the nodes. Can you compute this ratio for her?\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo compute the detour ratio of each edge, you can use the function edge_circuity().\n\n\n\n\n\nNow Kaya wants to replicate Figure 2 of the paper, which maps the betweenness centrality of nodes. Betweenness centrality of a node is the (normalized) proportion of shortest paths (computed between all possible node pairs) that pass through that node. Kaya argues that it is also interesting to compute and map this for edges instead of nodes, i.e. the proportion of shortest paths passing through an edge. Can you help her create these two maps?\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe betweenness centrality of nodes can be computed using tidygraph::centrality_betweenness(), and of edges using tidygraph::centrality_edge_betweenness(). For visualization, we recommend to use the {ggraph} package. An example:\n\nct_roads |&gt;\n  mutate(bc = centrality_betweenness()) |&gt;\n  ggraph(\"sf\") +\n  geom_edge_sf() +\n  geom_node_sf(aes(color = bc, size = bc))\n\n\n\n\n\n\nFinally, Kaya wants to create a polar histogram of street orientations like in Figure 3 of the paper. Besides one for the whole Cape Town study area, she wants to create separate ones for each suburb. Can you help her do this?\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe orientation of edges (relative to the true north, in degrees) can be computed using the function edge_azimuth(). This does require an unprojected coordinate reference system, with longitude and latitude coordinates. Since this is only needed for this specific computation, we can use the morphing workflow of {tidygraph} to temporarily change the coordinate reference system of our network:\n\nct_azimuths = ct_roads |&gt;\n  morph(to_spatial_transformed, 4326) |&gt;\n  activate(edges) |&gt;\n  mutate(orientation = edge_azimuth(degrees = TRUE)) |&gt;\n  unmorph()\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo create the polar histograms, use the great {ggplot2} package. Below is some code to do it, but try yourself first! The key is to use the function geom_histogram() in combination with coord_radial().\n\nlibrary(units)\nggplot(st_as_sf(ct_azimuths, \"edges\")) +\n  geom_histogram(aes(drop_units(angle)), bins = 72) +\n  scale_x_continuous(\n    limits = c(-180, 180),\n    expand = c(0, 0),\n    breaks = c(135, 90, 45, 0, -45, -90, -135, -180),\n    labels = c(\"S45°E\", \"E\", \"N45°E\", \"N\", \"N45°W\", \"W\", \"S45°W\", \"S\")\n  ) +\n  coord_radial(start = pi, direction = 1) +\n  theme_bw() +\n  theme(\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nJoseph\n\n\nTask 1 ⭐⚪⚪Task 2 ⭐⚪⚪Task 3 ⭐⚪⚪\n\n\nJoseph is a bit tired of having to deal with all these silly tourist questions. He asks you to help him. First up, Gunther from Austria. Are there more lion sightings reported on asphalt roads than on unpaved roads? And does this actually say anything about the probability of Gunther seeing lions when he is on a certain type of road?\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo find the nearest edge to point features, you can use the function nearest_edges() (or nearest_edge_ids() to only get their indices). To regroup the road types into fewer groups, look at the function fct_collapse() of the forcats package.\n\n\n\n\n\nAnswer the second question, from Francois. How does the shortest route visiting all camps once look like?\n\n\n\n\n\n\nNote\n\n\n\nThe problem you are solving here is a specific type of route optimization, commonly known as the traveling salesman problem.\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn {sfnetworks}, you can solve traveling salesman problems using the st_network_travel() function, which provides an interface to the {TSP} package.\n\n\n\n\n\nTo answer Susannes question, find out if there is a (negative?) correlation between the number of big five sightings and distance to rest camps. And does this actually say anything about the probability of seeing them when you are at a certain distance from the camp?\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo compute distances between points on the network, you can use the function st_network_cost(). If the points do not match a node location, they will first be snapped to their nearest node. For more accurate results, it is a good idea to first blend the points into the network (i.e., adding them as new nodes at their nearest location on the network) using the function st_network_blend().\n\n\n\n\n\n\n\n\nAmina\n\n\nTask 1 ⭐⚪⚪Task 2 ⭐⭐⚪Task 3 ⭐⭐⭐\n\n\nAmina knows very well that the first step of a spatial analysis is to visually explore the data on a map. Make a map showing the network and the wildlife sightings. You can either choose to map all sightings together, or make some separate maps for different species. It may also be interesting to color edges by an attribute of interest, e.g. the road type, or the number of sightings on each edge.\n\n\n\n\n\n\nHint\n\n\n\n\n\nFor visualization of sfnetwork objects, we recommend to use the {ggraph} package. See here for some examples of how to do this.\n\n\n\n\n\nOn the map Amina sees that the sightings appear to be spatially clustered. She wants to delineate these clusters using a spatial clustering algorithm, based on distances over the network rather than euclidean distances. Can you do this for her?\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe function group_spatial_dbscan() provides an interface to the {dbscan} package that can be used to cluster network nodes using the DBSCAN spatial clustering algorithm, based on network distance. However, we want to cluster the wildlife sightings. This would first require us to add them as nodes to the network, then focus only on those nodes using the new focus() verb of {tidygraph}, and then calling group_spatial_dbscan() on the focused network. Alternatively, you could call the dbscan() function of the {dbscan} package directly, feeding it the network distance matrix of the wildlife sighting locations, as computed with st_network_cost().\nHowever, you are also free to choose any other spatial clustering technique!\n\n\n\n\n\nAmina decides to analyze the wildlife sightings as a spatial point patterns. Can you see any problems with that approach? Regardless of that, Amina proceeds with her plan. First, she creates a spatial point pattern on a linear network using the {spatstat.linnet} package, which integrates well with {sfnetworks}. Then, she does some standard exploratory analysis:\n\nEstimating the intensity of the point pattern at each location on the network.\nAssessing if the point pattern is spatially random.\n\nAmina expects that the road surface type is a good predictor for wildlife sightings. Therefore, she fits a point pattern model to the data using road surface type as a covariate.\nCan you perform this analysis for Amina? And can you advice her if this model is in any way useful to predict wildlife sightings in the Limpopo National Park? How could she improve her model?\n\n\n\n\n\n\nHint\n\n\n\n\n\nThere is a good integration between {sfnetworks} and the {spatstat.linnet} package for spatial point pattern analysis. Amines analysis could look something like:\n\n# Convert a sfnetwork into a linnet object.\n# This cannot handle multiple edges between the same nodes.\n# Hence, we need to simplify the network first.\n# The network also needs to be connected.\n# Hence, we need to select the largest connected component.\nlinnet = kruger_roads |&gt;\n  convert(to_spatial_simple) |&gt;\n  convert(to_largest_component) |&gt;\n  as.linnet()\n\n# Convert the sightings into a point pattern.\nppp = as.ppp(kruger_animals)\n\n# Convert the point patterns to a point pattern on the network.\nlpp = lpp(ppp, linnet)\n\n# Estimate the intensity of the point pattern.\n# We use Euclidean distance just to speed up the process.\nD = density(lpp, distance = \"euclidean\")\nplot(density)\n\n# Assess spatial randomness.\ncdf.test(lpp, \"x\") # Along the x-axis\ncdf.test(lpp, \"y\") # Along the y-axis\n\n# Reorganize the road surface attribute.\n# Less common types get merged into a single type \"other\".\n# NA types get removed.\nkruger_roads_new = kruger_roads |&gt;\n  activate(edges) |&gt;\n  mutate(surface_new = fct_lump(surface, n = 4)) |&gt;\n  filter(!is.na(surface_new)) |&gt;\n  convert(to_largest_component) |&gt;\n  convert(to_spatial_simple) |&gt;\n\nlinnet_new = as.linnet(kruger_roads_new)\n\n# Create a marked tesselation of the network.\n# Using surface type as mark.\nlintess = lintess(\n  L = linnet_new,\n  df = data.frame(\n    seg = seq_len(n_edges(kruger_roads_new)),\n    t0 = 0,\n    t1 = 1,\n    tile = kruger_roads_new |&gt; activate(edges) |&gt; pull(surface_new)\n  )\n)\n\n# Fit a point process model using road surface as covariate.\nM = lppm(unmark(lpp) ~ lintess)\nM\n\n\n\n\n\n\n\n\n\nYou!\nDo you have any problems in mind to solve with the provided data, using {sfnetworks}? Go ahead and try it! We are there to help.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hands-on</span>"
    ]
  },
  {
    "objectID": "showcase.html",
    "href": "showcase.html",
    "title": "3  Workshop showcase",
    "section": "",
    "text": "3.1 Example group\nSome feedback on the workshop and our solution for Joseph’s tasks go here…",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Workshop showcase</span>"
    ]
  }
]